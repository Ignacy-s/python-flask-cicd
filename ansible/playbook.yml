---
- hosts: all
  become: yes

  vars:
    # Regular username, to not do unnecessary things as root
    regular_user: vagrant
    # Repo with helper scripts to be cloned onto the server
    bin_repo_name: "https://github.com/Ignacy-s/python-flask-cicd.git"
  tasks:

    - name: Add the Jenkins repo
      ansible.builtin.yum_repository:
        name: jenkins
        description: jenkins stable repo
        baseurl: "https://pkg.jenkins.io/redhat-stable"
        enabled: true
        gpgcheck: yes
        gpgkey: "https://pkg.jenkins.io/redhat-stable/\
          jenkins.io-2023.key"

    - name: Add the Docker repo
      ansible.builtin.yum_repository:
        name: docker
        description: official docker repo
        baseurl: "https://download.docker.com/linux/\
          centos/$releasever/$basearch/stable"
        enabled: true
        gpgcheck: true
        gpgkey: "https://download.docker.com/linux/\
          centos/gpg"

    - name: Add Hashicorp repository
      ansible.builtin.yum_repository:
        name: hashicorp
        description: official hashicorp repo
        baseurl: "https://rpm.releases.hashicorp.com/\
          RHEL/$releasever/$basearch/stable"
        enabled: true
        gpgcheck: true
        gpgkey: "https://rpm.releases.hashicorp.com/gpg"

    - name: Update all system packages before installation
      ansible.builtin.dnf:
        name: "*"
        state: latest

    - name: Remove conflicting packages
      ansible.builtin.dnf:
        name:
          - podman
          - buildah
          - docker
          - docker-client
          - docker-engine
        state: absent
            
    - name: Install required packages
      ansible.builtin.dnf:
        name:
          - java-17-openjdk
          - jenkins
          - git
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
          - terraform
          - jq
          - unzip
        state: present
        update_cache: true


    # Start of QoL block
    # This block is not essential and installs packages and binaries
    # that improve Quality of Life (make development easier)
    - block:
      - name: Install Helper Packages (locate & completions)
        ansible.builtin.dnf:
          name:
            - mlocate
            - bash-completion
            - unzip
          state: present

      - name: Download and extract Bitwarden CLI binary
        ansible.builtin.unarchive:
          src: "https://github.com/bitwarden/clients/releases/download/\
            cli-v2024.6.0/bw-linux-2024.6.0.zip"
          dest: /usr/local/bin/
          remote_src: yes
          mode: '0755'

      # - name: Download /bin from project's repo
      #   ansible.builtin.git:
      #     repo: "{{ bin_repo_name }}"
      #     dest: ~
      #     version: HEAD
      #     depth: 1
      #     sparse_checkout: bin/
      #   become: yes
      #   become_user: "{{ regular_user }}"

      - name: Initialize git repository for sparse checkout
        ansible.builtin.git:
          repo: "{{ bin_repo_name }}"
          dest: "~/sparse_repo"
          version: HEAD
          depth: 1
        become: yes
        become_user: "{{ regular_user }}"

      - name: Setup sparse checkout
        ansible.builtin.shell:
          cmd: |
            git sparse-checkout init --cone
            git sparse-checkout set bin/
          chdir: "~/sparse_repo"
        become: yes
        become_user: "{{ regular_user }}"

      - name: Copy scripts to /usr/local/bin
        ansible.builtin.copy:
          src: "/home/{{ regular_user }}/sparse_repo/bin/"
          dest: "/usr/local/bin/"
          remote_src: yes
          mode: '0755'


      - name: Update locate database
        ansible.builtin.command: updatedb
        changed_when:  false
      # End of QoL block

    - name: Add the jenkins user to docker group
      ansible.builtin.user:
        name: jenkins
        groups: docker
        append: yes

    - name: Check if AWS CLI is installed
      ansible.builtin.shell:
        cmd:         "type aws"
      become:        no
      register:      aws_presence_result
      ignore_errors: true
      changed_when:  false


    # This block installs AWS CLI if it hasn't been installed before
    - block:
      - name: Create a temp dir for AWS CLI installation files
        ansible.builtin.tempfile:
          state: directory
          path: /var/tmp
        register: temp_dir
  
      - name: Download AWS CLI installation archive
        ansible.builtin.get_url:
          url: https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
          dest: "{{ temp_dir.path }}/awscliv2.zip"
  
      - name: Unzip AWS CLI installation archive
        ansible.builtin.command:
          cmd: unzip "{{ temp_dir.path}}/awscliv2.zip" -d "{{ temp_dir.path }}"
        args:
          creates: "{{ temp_dir.path }}/aws"

      - name: Install the AWS CLI
        ansible.builtin.command:
          cmd: ./install
          chdir: "{{ temp_dir.path }}/aws"
  
      - name: Remove the temporary directory
        ansible.builtin.file:
          path: "{{ temp_dir.path }}"
          state: absent

      when: aws_presence_result.rc != 0

    - name: Start and enable services
      ansible.builtin.service:
        name: "{{ item }}"
        state: started
        enabled: yes
      loop:
        - jenkins
        - firewalld
        - docker

    - name: Allow Jenkins service in firewall
      ansible.posix.firewalld:
        service: jenkins
        state: enabled
        permanent: true
        immediate: yes
