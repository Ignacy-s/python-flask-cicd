This is a simple CI/CD project to showcase my skills in ....

It's aim is for someone to be able to download this repository and run it
himself to create a working CI/CD pipeline in AWS based on Jenkins
that deploys a container with a flask web app to AWS each time a
commit is made to the tracked flask app repository. 


* DONE Fork the simple Python Flask web application.
CLOSED: [2023-04-18 Tue 18:46]
** Exploring tutor's choice of the app. Reading about Corey Schafer on his blog, https://coreyms.com
This app was committed as a whole, with several distinct stages. I'm
going to use the stages as basis of separate commits for testing of
the pipeline and in the beginning only commit the first stage.
** Download the repository contents with curl.
#+BEGIN_SRC bash
curl -L
http://github.com/CoreyMSchafer/code_snippets/archive/master.tar.gz |
tar zxf -
#+END_SRC
** Created a new repository, copied contents of the first chapter from Flask_Blog tutorial.
Flask Blog code found at [[https://github.com/CoreyMSchafer/code_snippets/tree/master/Python/Flask_Blog][this address]].
Copied .gitignore from the CI/CD repo, but added the name of directory
with the original Corey's repo files, so they wont all get committed
at once.

* DONE Create a separate repository for Jenkins provisioning, installation, and configuration.
CLOSED: [2023-04-18 Tue 18:47]
* TODO Set up Jenkins part 1: setting up a VM on AWS using Terraform.
** Create a data source that gets the AMI of the latest Alma Linux 9
** Create a base main.tf file that is a copy from the Terraform Up and Running code. Also add an alternative version that was given as an example of Jenkins setup on AWS.
** Add definitions for basic VPC and subnet
** Modify the basic security group definition to allow incoming traffic on ports 22 (for SSH) and 8080 (Jenkins web app)
** Move some values to variables to make code cleaner and reusable or usable by people who choose to use different AWS region
*** Move the port values to a variable and use variables instead.
*** Move the EC2 instance type to a variable (eu-north-1 region requires usage of a non standard t3 type server)
*** Move the region name to a variable.
** Create a script to create and open/close LUKS container (which can hold the SSH key).
** Write out pseudocode for a script that would execute the whole project.
** Put the initial steps (vault creation, SSH key generation and uploading and Jenkins VM spin up) into the playtrough script.
*** 1: Vault creation - done
*** 2: SSH key generation - done
*** 3: SSH key uploading & VM spin up - need to finish some things first:
**** Find a way to make the EC2 instance accessible from the internet (can't access it now if I'm creating my own subnet)
**** Find a way to pass the IP address of the EC2 instance to Ansible
** Had some issues wit creating a VM accessible from the outside. Followed a blog article tutorial and succeeded, need to take what I learned there and put it in my Terraform code. 
Following instructions in the [[https://medium.com/geekculture/how-to-manage-public-and-private-subnets-in-aws-with-terraform-69c272003c81][blog post]] for deploying a private and public subnet on AWS using Terraform.
*** Planning:
I'll create this infrastructure copying the solution from the blog
word for word in a separate directory. After confirming that it works,
I'll note the differences between the working infrastructure and what
I had. Afterwards I'll use the notes to modify mine to comply with the
working one and hope it will be what's needed. From skimming the
document quickly, I guess that my problem was not adding the routing
table to the public subnet, but it might not be everything.
*** DONE Create a file for VPC
CLOSED: [2023-06-19 Mon 18:42]
*** DONE Create a file for Public Subnet
CLOSED: [2023-06-19 Mon 18:49]
*** DONE Create a file for Internet Gateway
CLOSED: [2023-06-19 Mon 19:31]
*** DONE Create a file for the Route Table for the Public Subnet
CLOSED: [2023-06-19 Mon 19:37]
*** DONE Create a file for the Security Group
CLOSED: [2023-06-19 Mon 21:51]
*** DONE Create a file for the Public EC2 Instance
CLOSED: [2023-06-19 Mon 22:03]
*** DONE Create a variable file
CLOSED: [2023-06-19 Mon 22:05]
*** DONE Creating a NAT with an Elastic IP - what I'm not going to do.
CLOSED: [2023-06-19 Mon 22:05]
**** Create a file for the Public Subnet for NAT Gateway
**** Create a file for Elastic IP (EIP)
**** Create a file for the NAT Gateway
**** Create a file for the Route Table for the NAT Gateway
**** Create a file for the Private Subnet
**** Create a file for the Route Table for the Private Subnet
**** Create a file for the Private EC2 Instance
*** DONE Run and see if it works
CLOSED: [2023-06-20 Tue 12:44]
**** Strange error, looked like one line was "disappeared" in Emacs.
Terraform signaled an error of redefining type. This type of error
happens if we have a double definition of something that can only be
defined once.

I didn't see anything wrong in the file. Turning on the 'linum-mode'
in Emacs showed, that there was one line that "disappeared". Line 4
was right after the second line. I didn't investigate, just went to
the end of line 2 and held delete until I deleted the phantom line.
**** Had to add the ssh key uploading code.
I thought I can just link the name of the key uploaded by the flask
terraform code. It didn't work, maybe because 'terraform destroy'
destroys also SSH keys that are defined in the project. I just copied
what had to be copied and got the ssh-key name using terraform
variable substitution instead of the name I could get from AWS. Thanks
to writing out all the code I feel like I'm getting the hang of
Terraform. At least the hang of how things tend to be named and how to
get id's or inside-secret-names of things, using variables.



*** DONE Find the differences
CLOSED: [2023-06-22 Thu 18:17]
Differences were the routing table and routing table association.
*** DONE Add them to flask-ci-cd Terraform code.
CLOSED: [2023-06-23 Fri 15:42]
Added all networking infrastructure code to main.tf.

** TODO <<Create a file with secrets in the vault>>
*** Temporarily solved by having Terraform update Ansible's inventory file on each execution of 'terraform apply'.
*** We can keep some kind of state file there so that Terraform, Ansible and later Jenkins can communicate with each other or find out details on how to run the project.
*** File will be in bash, so that it can be sourced to read all the variables into memory.
*** To protect the secrets, a trap will be added to playtrough.sh script so that on script exit, the vault can be locked again.
*** Since vault starts as empty, we need to check if it(file with secrets)'s there and generate the file if it doesn't exist yet.


* Set up Jenkins part 2: install Jenkins using Ansible.
* Set up Jenkins part 3: Configure Jenkins using JCasC
* Create a Jenkinsfile in the Flask web application repository
* Deploy the Flask web application

* TODO's:
** Create a secret's file in the vault, as described [[Create a file with secrets in the vault][here]] in part 1 of the project.
** vault_management.sh (low priority, because using Hashicorp's Vault will make this script obsolete):
*** Vault management script could detect if container is already created/closed/open and not report an error if container state is already as requested.
*** Add an option to destroy the existing vault.
** playtrough.sh
*** If the variables in the vault are not set, interview the user about required project details at the beginning of the script.
*** DONE Both sub points can be achieved checking for presence of a dotfile.
CLOSED: [2023-06-15 Thu 13:50]
**** Test if script is run in the project's root directory
**** Test if the vault is already accessible
*** DONE Get password from a file or source other than user's input.
CLOSED: [2023-06-13 Tue 12:05]
If an environment variable with password is already defined,
playtrough.sh will not ask for the password.

*** Mention the opt-in to the Alma Linux AMI in playtrough.sh
 Error: creating EC2 Instance: OptInRequired: In order to use this AWS Marketplace product you need to accept terms and subscribe. To do so please visit https://aws.amazon.com/marketplace/pp?sku=3kukoxmnoighcsbjd0u4nq9ds
â”‚       status code: 401, request id:
c915e28b-9e1e-4199-9e1c-a5e027333e9e
**** Maybe it will be enough to warn the user? Would be cool to somehow force this subscription as one of the steps in the playtrough.sh. Maybe even test for it.

* Mistakes:
** Terraform:
*** Encapsulated a variable reference in double quotes, making it a literal string (effectively) turning off the reference mechanism.
#+BEGIN_SRC terraform
  provider "aws" {
    region = var.aws_region # Correct
    # region = "var.aws_region" # Incorrect
  }
#+END_SRC
